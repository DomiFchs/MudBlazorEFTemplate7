<MudIconButton Class="@Class" Color="Color" OnClick="OnClickAsync" Icon="@Icon"
               Disabled="_disabled || Disabled">
</MudIconButton>

@code {
    private bool _disabled;

    [Parameter]
    public bool Disabled { get; set; }

    [Parameter]
    public string Class { get; set; } = string.Empty;

    [Parameter]
    public Color Color { get; set; } = Color.Default;

    [Parameter]
    [EditorRequired]
    public Func<Task> OnClick { get; set; } = null!;

    [Parameter]
    [EditorRequired]
    public string Icon { get; set; } = null!;

    private async Task OnClickAsync() {
        if (_disabled) return;
        _disabled = true;
        await OnClick.Invoke();
        _disabled = false;
    }

    public override async Task SetParametersAsync(ParameterView parameters) {
        foreach (var parameter in parameters) {
            switch (parameter.Name) {
                case "OverrideDisabled":
                    Disabled = (bool)parameter.Value;
                    break;
                case "Class":
                    Class = (string)parameter.Value;
                    break;
                case "Color":
                    Color = (Color)parameter.Value;
                    break;
                case "OnClick":
                    OnClick = (Func<Task>)parameter.Value;
                    break;
                case "Icon":
                    Icon = (string)parameter.Value;
                    break;
                case "Disabled":
                    Disabled = (bool)parameter.Value;
                    break;
                default:
                    throw new ArgumentException($"Unknown parameter: {parameter.Name}");
            }
        }
        await base.SetParametersAsync(ParameterView.Empty);
    }

}