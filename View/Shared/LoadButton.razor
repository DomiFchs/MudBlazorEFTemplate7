<MudButton Class="@Class" Color="Color" Variant="Variant.Filled"
           Disabled="_isLoading || Disabled" OnClick="OnClickAsync">
    @if (_isLoading) {
        <MudText Typo="Typo" Color="TextColor">
            Laden...
        </MudText>
    }
    else {
        if (Text is not null) {
            <MudText Typo="Typo" Color="TextColor">
                @Text
            </MudText>
        }

        @ChildContent
    }
</MudButton>


@code {
    private bool _isLoading;

    [Parameter]
    public string Class { get; set; } = string.Empty;

    [Parameter]
    public Color Color { get; set; } = Color.Primary;

    [Parameter]
    [EditorRequired]
    public Func<Task> OnClick { get; set; } = null!;

    [Parameter]
    public string? Text { get; set; }

    [Parameter]
    public Typo Typo { get; set; } = Typo.button;

    [Parameter]
    public Color TextColor { get; set; }

    [Parameter]
    public bool Disabled { get; set; }

    [Parameter]
    public RenderFragment ChildContent { get; set; } = null!;

    private async Task OnClickAsync() {
        _isLoading = true;
        await OnClick.Invoke();
        _isLoading = false;
    }

    public override async Task SetParametersAsync(ParameterView parameters) {
        foreach (var parameter in parameters) {
            switch (parameter.Name) {
                case "Class":
                    Class = (string)parameter.Value;
                    break;
                case "Color":
                    Color = (Color)parameter.Value;
                    break;
                case "OnClick":
                    OnClick = (Func<Task>)parameter.Value;
                    break;
                case "Text":
                    Text = (string)parameter.Value;
                    break;
                case "Typo":
                    Typo = (Typo)parameter.Value;
                    break;
                case "TextColor":
                    TextColor = (Color)parameter.Value;
                    break;
                case "Disabled":
                    Disabled = (bool)parameter.Value;
                    break;
                case "ChildContent":
                    ChildContent = (RenderFragment)parameter.Value;
                    break;
                default:
                    throw new ArgumentException($"Unknown parameter: {parameter.Name}");
            }
        }

        await base.SetParametersAsync(ParameterView.Empty);
    }

}